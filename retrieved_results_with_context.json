[
    {
        "score": 1.13491261,
        "content": "async def create_unified_trace(request: Request, call_next):\n    try:\n        trace_id = request.headers.get(\"X-Request-ID\", None)\n        langfuse_client = langfuse_context.get()\n        \n        if not trace_id:\n            trace = langfuse_client.trace(\n                id = request_context.get(),\n                name = f\"Trace ID {request_context.get()}\",\n            )\n            \n            token = tracer_context.set(trace)\n            \n            trace_id = trace.id\n            \n        else:\n            trace = langfuse_client.trace(id = trace_id)\n            \n        request.state.trace_id = trace_id\n        \n        response = await call_next(request)\n        \n        response.headers[\"X-Trace-ID\"] = trace_id\n    finally:\n        tracer_context.reset(token)\n    \n    return response\nFunction to create a unified trace ID using Langfuse, setting it in request state and response headers.  Handles cases with and without existing X-Request-ID.\n",
        "start_line": 19,
        "end_line": 45,
        "file_name": "middleware.py",
        "file_path": "/Users/tapankheni/Developer/POC-SWE-RAG/observe_traces/middleware/middleware.py"
    },
    {
        "score": 0.90730834,
        "content": "async def set_request_context(request: Request, call_next):\n    request_id = request.headers.get(\"X-Request-ID\", str(uuid.uuid4())) \n \n    if request_context.get() is None:\n        token = request_context.set(request_id)\n\n    try:\n        response = await call_next(request)\n    finally:\n        request_context.reset(token)\n        \n    response.headers[\"X-Request-ID\"] = request_id\n    return response\nFunction to set and manage request context using X-Request-ID header, generating a UUID if missing.\n",
        "start_line": 5,
        "end_line": 17,
        "file_name": "middleware.py",
        "file_path": "/Users/tapankheni/Developer/POC-SWE-RAG/observe_traces/middleware/middleware.py"
    },
    {
        "score": 0.896426082,
        "content": "import uuid\nfrom fastapi import Request\nfrom observe_traces.config.context_util import request_context, tracer_context, langfuse_context\nImport statements at the beginning of a FastAPI middleware function definition.\n",
        "start_line": 1,
        "end_line": 3,
        "file_name": "middleware.py",
        "file_path": "/Users/tapankheni/Developer/POC-SWE-RAG/observe_traces/middleware/middleware.py"
    },
    {
        "score": 0.857095063,
        "content": "def get_request_id() -> str:\n    return request_context.get()\nPython functions to retrieve request ID and tracer from context objects.\n",
        "start_line": 4,
        "end_line": 5,
        "file_name": "utils.py",
        "file_path": "/Users/tapankheni/Developer/POC-SWE-RAG/observe_traces/config/utils.py"
    },
    {
        "score": 0.82067132,
        "content": "from contextvars import ContextVar\nfrom fastapi import Request\nfrom langfuse.client import StatefulTraceClient, Langfuse\nImport statements for context variables and Langfuse client.\n",
        "start_line": 1,
        "end_line": 3,
        "file_name": "context_util.py",
        "file_path": "/Users/tapankheni/Developer/POC-SWE-RAG/observe_traces/config/context_util.py"
    }
]